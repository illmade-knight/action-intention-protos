const fs = require('fs');
const path = require('path');

const indexDir = path.join(__dirname, '..', 'gen', 'ts');
const tsGenDir = path.join(__dirname, '..', 'gen', 'ts', 'proto');
const tsRealDir = path.join(__dirname, '..', 'gen', 'ts', 'real'); // NEW: Source for idiomatic TS files
const indexPath = path.join(indexDir, 'index.ts');

console.log('Creating TypeScript barrel file (index.ts)...');

/**
 * Recursively finds all files in a directory that match the pattern '_pb.ts'.
 * @param {string} dir The directory to search.
 * @returns {string[]} An array of file paths relative to the starting directory.
 */
function findProtoFiles(dir) {
    let results = [];
    const list = fs.readdirSync(dir);
    list.forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        if (stat && stat.isDirectory()) {
            // Recurse into a subdirectory
            results = results.concat(findProtoFiles(filePath));
        } else if (file.endsWith('_pb.ts')) {
            // Found a match
            results.push(filePath);
        }
    });
    return results;
}

function findTsFiles(dir) {
    let results = [];
    if (!fs.existsSync(dir)) {
        return results;
    }
    const list = fs.readdirSync(dir);
    list.forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        if (stat && stat.isDirectory()) {
            // Recurse into a subdirectory
            results = results.concat(findTsFiles(filePath));
        } else if (file.endsWith('.ts')) {
            // Found a TypeScript file
            results.push(filePath);
        }
    });
    return results;
}

try {
    var protoFiles = []
    if (!fs.existsSync(tsGenDir)) {
        console.warn(`Warning: TypeScript generation directory not found at ${tsGenDir}. Skipping index creation.`);

    } else {
        protoFiles = findProtoFiles(tsGenDir);
    }

    // Create export statements with relative paths from the index file's location.
    // The .js extension is required for modern ESM compatibility.
    const protoExports = protoFiles.map(filePath => {
        const relativePath = path.relative(indexDir, filePath);
        // Use forward slashes for cross-platform compatibility in import paths
        const modulePath = relativePath.replace(/\\/g, '/').replace('.ts', '.js');
        return `export * from './${modulePath}';`;
    });

    var realFiles = []
    if (!fs.existsSync(tsRealDir)) {
        console.warn(`Warning: TypeScript real directory not found at ${tsRealDir}. Skipping index creation.`);
    } else {
        realFiles = findTsFiles(tsRealDir);
    }

    // Create export statements with relative paths from the index file's location.
    // The .js extension is required for modern ESM compatibility.
    const realExports = realFiles.map(filePath => {
        const relativePath = path.relative(indexDir, filePath);
        console.log(relativePath)
        // Use forward slashes for cross-platform compatibility in import paths
        const modulePath = relativePath.replace(/\\/g, '/').replace('.ts', '.js');
        return `export * from './${modulePath}';`;
    });

    console.log(realExports)

    const exports = [...realExports, ...protoExports]

    const content = `// This file is auto-generated by the create-ts-index.js script. Do not edit.\n\n` +
        exports.join('\n') + '\n';

    fs.writeFileSync(indexPath, content);
    console.log(`Successfully created index.ts with ${exports.length} exports.`);

} catch (error) {
    console.error('Failed to create TypeScript index file:', error);
    process.exit(1);
}

