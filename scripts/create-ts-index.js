// THE FIX: Updated to use ES Module syntax (import/export).
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// This is the modern replacement for '__dirname' in ES Modules.
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const indexDir = path.join(__dirname, '..', 'gen', 'ts');
const tsGenDir = path.join(__dirname, '..', 'gen', 'ts', 'proto');
const tsRealDir = path.join(__dirname, '..', 'gen', 'ts', 'real');
const indexPath = path.join(indexDir, 'index.ts');

console.log('Creating TypeScript barrel file (index.ts)...');

function findProtoFiles(dir) {
    let results = [];
    const list = fs.readdirSync(dir);
    list.forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        if (stat && stat.isDirectory()) {
            results = results.concat(findProtoFiles(filePath));
        } else if (file.endsWith('_pb.ts')) {
            results.push(filePath);
        }
    });
    return results;
}

function findTsFiles(dir) {
    let results = [];
    if (!fs.existsSync(dir)) {
        return results;
    }
    const list = fs.readdirSync(dir);
    list.forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        if (stat && stat.isDirectory()) {
            results = results.concat(findTsFiles(filePath));
        } else if (file.endsWith('.ts')) {
            results.push(filePath);
        }
    });
    return results;
}

const protoFiles = findProtoFiles(tsGenDir);
const realFiles = findTsFiles(tsRealDir);

const protoExports = protoFiles.map(filePath => {
    const relativePath = path.relative(tsGenDir, filePath);
    const modulePath = relativePath.replace(/\\/g, '/').replace('.ts', '.js');
    return `export * from './proto/${modulePath}';`;
});

const realExports = realFiles.map(filePath => {
    const relativePath = path.relative(tsRealDir, filePath);
    const modulePath = relativePath.replace(/\\/g, '/').replace('.ts', '.js');
    return `export * from './real/${modulePath}';`;
});

const exports = [...realExports, ...protoExports];

const content = `// This file is auto-generated by the create-ts-index.js script. Do not edit.\\n\\n` +
    exports.join('\\n') + '\\n';

fs.writeFileSync(indexPath, content);
console.log(`Successfully created index.ts with ${exports.length} exports.`);
